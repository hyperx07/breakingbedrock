plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.7.4"
    id "com.github.johnrengelman.shadow" version "8.1.+" apply false
}

architectury.minecraft = minecraft_version

version = (mod_version + "+" + minecraft_version)

Map<String, String> modProperties() {
    [
            version: mod_version, mod_id: mod_id, description: project.properties.description,
            github_repo: 'http://github.com/' + github, display_name: display_name,
            modrinth_id: modrinth_id, curseforge_id: curseforge_id,
    ]
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

subprojects {
    apply plugin: "dev.architectury.loom"

    dependencies {
        minecraft "com.mojang:minecraft:$minecraft_version"
        mappings loom.layered() {
            officialMojangMappings()
            parchment "org.parchmentmc.data:parchment-1.21:2024.07.28@zip"
        }
    }

    processResources {
        def properties = modProperties()
        inputs.properties properties

        filesMatching(["META-INF/*mods.toml", "fabric.mod.json", "pack.mcmeta"]) {
            expand properties
            filter { it.empty ? null : it }
        }

        doLast {
            fileTree(dir: outputs.files.asPath, includes: ["**/*.json", "**/*.mcmeta"]).each {
                it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
            }
        }
    }

    tasks.withType(Jar).configureEach {
        exclude "architectury_inject*/PlatformMethods.class"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base.archivesName = mod_id

    version = mod_version + "+" + minecraft_version
    group = maven_group

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java.withSourcesJar()

    [jar, sourcesJar]*.configure {
        from 'LICENSE'
    }
}

publishMods {
    version = project.version
    changelog = project.changelog
    type = STABLE
    def fabricJar = project.provider { project(":fabric").remapJar }.flatMap { it.archiveFile }
    def fabricSources = project.provider { project(":fabric").remapSourcesJar }.flatMap { it.archiveFile }
    def neoForgeJar = project.provider { project(":neoforge").remapJar }.flatMap { it.archiveFile }
    def neoForgeSources = project.provider { project(":neoforge").remapSourcesJar }.flatMap { it.archiveFile }

    def fabric = publishOptions {
        file = fabricJar
        additionalFiles.from fabricSources
        displayName = "[Fabric 1.20.5+] $display_name $version"
        modLoaders.addAll "fabric", "quilt"
    }

    def neoForge = publishOptions {
        file = neoForgeJar
        additionalFiles.from neoForgeSources
        displayName = "[Neo(Forge) 1.20.5+] $display_name $version"
        modLoaders.add "forge"
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable('MODRINTH_TOKEN')
        dryRun = !accessToken.present
        projectId = modrinth_id
    }

    def curseOptions = curseforgeOptions {
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN')
        dryRun = !accessToken.present
        projectId = curseforge_id
        clientRequired = true
        serverRequired = true
    }

    curseforge("curseFabric") {
        from curseOptions, fabric
        minecraftVersionRange {
            start = "1.20.5"
            end = "latest"
        }
    }

    curseforge("curseNeoForge") {
        from curseOptions, neoForge
        minecraftVersionRange {
            start = "1.20.5"
            end = "latest"
        }
    }

    modrinth("modrinthFabric") {
        from modrinthOptions, fabric
        minecraftVersionRange {
            start = "24w12a"
            end = "latest"
            includeSnapshots = true
        }
    }

    modrinth("modrinthNeoForge") {
        from modrinthOptions, neoForge
        minecraftVersionRange {
            start = "1.20.5"
            end = "latest"
        }
    }

    github {
        additionalFiles.from fabricJar, neoForgeJar, fabricSources, neoForgeSources
        accessToken = providers.environmentVariable('GITHUB_TOKEN')
        dryRun = !accessToken.present
        repository = github
        commitish = "20.5+"
        tagName = version
    }
}
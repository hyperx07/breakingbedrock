plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.6.3"
}

architectury.minecraft = minecraft_version

version = mod_version + "+" + minecraft_version

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

Map<String, String> modProperties() {
    [
            version: mod_version, mod_id: mod_id, description: project.properties.description,
            github_repo: 'http://github.com/' + github, display_name: display_name,
            modrinth_id: modrinth_id, curseforge_id: curseforge_id
    ]
}

subprojects {
    apply plugin: "dev.architectury.loom"

    dependencies {
        minecraft "com.mojang:minecraft:$minecraft_version"
        mappings loom.layered() {
            officialMojangMappings()
            parchment "org.parchmentmc.data:parchment-$minecraft_version:2023.09.03@zip"
        }
    }

    processResources {
        def properties = modProperties()

        inputs.properties properties

        filesMatching(["META-INF/*mods.toml", "fabric.mod.json", "pack.mcmeta"]) {
            expand properties
            filter { it.empty ? null : it }
        }

        doLast {
            fileTree(dir: outputs.files.asPath, includes: ["**/*.json", "**/*.mcmeta"]).each {
                it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base.archivesName = mod_id

    version = mod_version
    group = maven_group

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java.withSourcesJar()

    [jar, sourcesJar]*.configure {
        from 'LICENSE'
    }
}

publishMods {
    changelog = project.changelog
    type = STABLE
    def fabricJar = project.provider { project(":fabric").remapJar }.flatMap { it.archiveFile }
    def fabricSources = project.provider { project(":fabric").remapSourcesJar }.flatMap { it.archiveFile }
    def forgeJar = project.provider { project(":forge").remapJar }.flatMap { it.archiveFile }
    def neoJar = project.provider { project(":forge").shadowJar }.flatMap { it.archiveFile }
    def forgeSources = project.provider { project(":forge").remapSourcesJar }.flatMap { it.archiveFile }

    def fabric = publishOptions {
        file = fabricJar
        additionalFiles.from forgeSources
        displayName = "[Fabric 1.16-1.20.4] $display_name $version"
        modLoaders.addAll "fabric", "quilt"
    }

    def forge = publishOptions {
        file = forgeJar
        additionalFiles.from fabricSources
        displayName = "[Forge 1.17-1.20.4] $display_name $version"
        modLoaders.add "forge"
    }

    def neo = publishOptions {
        file = neoJar
        additionalFiles.from forgeSources
        displayName = "[NeoForge 1.20.2-.4] $display_name $version"
        modLoaders.add "neoforge"
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable('MODRINTH_TOKEN')
        dryRun = !accessToken.present
        projectId = modrinth_id
    }

    def curseOptions = curseforgeOptions {
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN')
        dryRun = !accessToken.present
        projectId = curseforge_id
        clientRequired = true
        serverRequired = true
    }

    curseforge("curseFabric") {
        from curseOptions, fabric
        minecraftVersionRange {
            start = "1.16"
            end = "1.20.4"
        }
    }

    curseforge("curseForge") {
        from curseOptions, forge
        minecraftVersionRange {
            start = "1.17"
            end = "1.20.4"
        }
    }

    curseforge("curseForge") {
        from curseOptions, neo
        minecraftVersionRange {
            start = "1.20.2"
            end = "1.20.4"
        }
    }

    modrinth("modrinthFabric") {
        from modrinthOptions, fabric
        minecraftVersionRange {
            start = "20w12a"
            end = "24w11a"
            includeSnapshots = true
        }
    }

    modrinth("modrinthForge") {
        from modrinthOptions, forge
        minecraftVersionRange {
            start = "1.17"
            end = "1.20.4"
        }
    }

    modrinth("modrinthNeo") {
        from modrinthOptions, neo
        minecraftVersionRange {
            start = "1.20.2"
            end = "1.20.4"
        }
    }

    github {
        file = fabricJar
        additionalFiles.from forgeJar, fabricSources, forgeSources
        accessToken = providers.environmentVariable('GITHUB_TOKEN')
        dryRun = !accessToken.present
        repository = github
        commitish = "16-20.5"
        tagName = "release/" + version
    }
}

allprojects {
    repositories.flatDir { dir rootProject.file('customLibs') }
    architectury.transformerVersion = "5.2.9999"
}
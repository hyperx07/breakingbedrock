plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    runs {
        clientDebug {
            client()
            ideConfigGenerated true
            name = "Minecraft Client Debug"
            source sourceSets.main
            property 'mixin.debug', 'true'
            property "fabric.log.level", "debug"
        }

        serverDebug {
            server()
            ideConfigGenerated true
            name = "Minecraft Server Debug"
            source sourceSets.main
            property 'mixin.debug', 'true'
            property "fabric.log.level", "debug"
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    shadowCommon { // don't use shadow from the shadow plugin since it *excludes* files.
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url 'https://maven.neoforged.net/releases/' }
}

dependencies {
    neoForge "net.neoforged:neoforge:$neoforge_version"

    def forgeVer = "$minecraft_version-$forge_version"
    compileOnly("net.minecraftforge:fmlloader:$forgeVer") { transitive false }
//    compileOnly("net.minecraftforge:forge:$forgeVer:universal") { transitive false }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

tasks.withType(Jar).configureEach {
    manifest.attributes.put 'MixinConfigs', mod_id + '.mixins.json'
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set 'neoforge'
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    archiveClassifier.set archiveClassifier.get() + '-neoforge'
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
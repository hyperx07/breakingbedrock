plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        clientDebug {
            client()
            ideConfigGenerated true
            name = "Minecraft Client Debug"
            source sourceSets.main
            property 'mixin.debug', 'true'
            property "fabric.log.level", "debug"
        }

        serverDebug {
            server()
            ideConfigGenerated true
            name = "Minecraft Server Debug"
            source sourceSets.main
            property 'mixin.debug', 'true'
            property "fabric.log.level", "debug"
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    shadowCommon {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modImplementation fabricApi.module("fabric-resource-loader-v0", fabric_api_version)

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric"))
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set('fabric')
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    archiveClassifier.set archiveClassifier.get() + '-fabric'
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

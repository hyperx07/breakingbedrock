plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "${mod_id}.mixins.json"
    }

    runs {
        clientDebug {
            client()
            ideConfigGenerated true
            name = "Minecraft Client Debug"
            source sourceSets.main
            property 'mixin.debug', 'true'
            property "fabric.log.level", "debug"
        }

        serverDebug {
            server()
            ideConfigGenerated true
            name = "Minecraft Server Debug"
            source sourceSets.main
            property 'mixin.debug', 'true'
            property "fabric.log.level", "debug"
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    shadowCommon {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:$minecraft_version-$forge_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge"))
}

processResources {
    exclude "META-INF/neoforge.mods.toml"
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
    destinationDirectory.set destinationDirectory.dir('../devlibs').get()
    exclude "architectury_inject*/**"
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

build.dependsOn tasks.register("neoforgeJar", ShadowJar) {
    dependsOn jar

    from(sourceSets.main.output) { exclude "META-INF/mods.toml" }
    from(sourceSets.main.resources.matching(new PatternSet().include("META-INF/neoforge.mods.toml")).singleFile) {
        rename { "META-INF/mods.toml" }
        filter { it.empty ? null : it }

        def props = rootProject.modProperties()
        inputs.properties props
        expand props
    }

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "neoforge"
    archiveVersion = project.mod_version + "+1.20.4-neoforge"
    relocate 'net.minecraftforge', 'net.neoforged'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}